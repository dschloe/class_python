{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Chapter 4 테드 강연으로 다뤄보는 복잡한 형태의 데이터","provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyM8WmoMo9cf8x2DRMJQXKrd"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"A1BB-ng6pmxu","executionInfo":{"status":"ok","timestamp":1604068250888,"user_tz":-540,"elapsed":36958,"user":{"displayName":"Ji-hoon Jung","photoUrl":"","userId":"03169308685755834042"}},"outputId":"3d2a8783-18ce-425b-9b97-ff0002f71168","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Mount Google Drive\n","from google.colab import drive # import drive from google colab\n","\n","ROOT = \"/content/drive\"     # default location for the drive\n","print(ROOT)                 # print content of ROOT (Optional)\n","drive.mount(ROOT)           # we mount the google drive at /content/drive"],"execution_count":1,"outputs":[{"output_type":"stream","text":["/content/drive\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"gbH3cidRqGfF","executionInfo":{"status":"ok","timestamp":1604068254753,"user_tz":-540,"elapsed":1732,"user":{"displayName":"Ji-hoon Jung","photoUrl":"","userId":"03169308685755834042"}}},"source":["# import join used to join ROOT path and MY_GOOGLE_DRIVE_PATH\n","from os.path import join  \n","\n","# path to your project on Google Drive\n","MY_GOOGLE_DRIVE_PATH = 'My Drive/Colab Notebooks/elice_hana_DT/track_2_실전 데이터 분석'\n","\n","PROJECT_PATH = join(ROOT, MY_GOOGLE_DRIVE_PATH)"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"IdEOWBhLqclv","executionInfo":{"status":"ok","timestamp":1604068258598,"user_tz":-540,"elapsed":3402,"user":{"displayName":"Ji-hoon Jung","photoUrl":"","userId":"03169308685755834042"}},"outputId":"e76ddcc4-39d4-4db4-a5c5-d575af8e8c63","colab":{"base_uri":"https://localhost:8080/"}},"source":["%cd \"{PROJECT_PATH}\"\n","%ls"],"execution_count":3,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/Colab Notebooks/elice_hana_DT/track_2_실전 데이터 분석\n","'Chapter 1. 트럼프 대통령 트윗으로 시작하는 데이터 처리.ipynb'\n","'Chapter 2 영어 단어 모음으로 시작하는 텍스트 파일 분석.ipynb'\n","'Chapter 3 넷플릭스 시청 데이터로 알아보는 데이터형 변환.ipynb'\n","'Chapter 4 테드 강연으로 다뤄보는 복잡한 형태의 데이터'\n"," \u001b[0m\u001b[01;34mdata\u001b[0m/\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"JBL9BQzs60rJ"},"source":["## CSV 데이터 읽고 처리하기\n","CSV는 콤마로 나뉘어진 데이터 형식으로, 용량이 작고 엑셀 등의 프로그램으로 보기 좋게 표현할 수 있다는 장점이 있습니다. 파이썬의 내장 csv 라이브러리를 이용하면 CSV 파일을 효율적으로 읽어 올 수 있습니다.\n","\n","reader()는 CSV 파일의 내용을 먼저 줄 별로 나눈 뒤, 구분 기호(delimiter)를 기준으로 분리해 주는 함수입니다.\n","\n"]},{"cell_type":"code","metadata":{"id":"LXU3S_XV62dZ","executionInfo":{"status":"ok","timestamp":1604068341842,"user_tz":-540,"elapsed":1667,"user":{"displayName":"Ji-hoon Jung","photoUrl":"","userId":"03169308685755834042"}},"outputId":"af4becd5-47a3-4cfb-af8b-2e551f4feb46","colab":{"base_uri":"https://localhost:8080/"}},"source":["# csv 모듈을 임포트합니다. \n","import csv\n","\n","def print_book_info(filename):\n","    with open(filename) as file:\n","        # ',' 기호로 분리된 CSV 파일을 처리하세요..\n","        reader = csv.reader(file, delimiter=\",\")\n","        \n","        # 처리된 파일의 각 줄을 불러옵니다.\n","        for row in reader:\n","            \n","            # 함수를 완성하세요.\n","            title = row[0]\n","            author = row[1]\n","            pages = row[3]\n","            print(\"{} ({}): {}p\".format(title, author, pages))\n","\n","# 아래 주석을 해제하고 실행 결과를 확인해보세요.\n","filename = 'data/books.csv'\n","print_book_info(filename)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Fundamentals of Wavelets (Goswami, Jaideva): 228p\n","Data Smart (Foreman, John): 235p\n","God Created the Integers (Hawking, Stephen): 197p\n","Superfreakonomics (Dubner, Stephen): 179p\n","Orientalism (Said, Edward): 197p\n","Nature of Statistical Learning Theory, The (Vapnik, Vladimir): 230p\n","Integration of the Indian States (Menon, V P): 217p\n","Drunkard's Walk, The (Mlodinow, Leonard): 197p\n","Image Processing & Mathematical Morphology (Shih, Frank): 241p\n","How to Think Like Sherlock Holmes (Konnikova, Maria): 240p\n","Data Scientists at Work (Sebastian Gutierrez): 230p\n","Slaughterhouse Five (Vonnegut, Kurt): 198p\n","Birth of a Theorem (Villani, Cedric): 234p\n","Structure & Interpretation of Computer Programs (Sussman, Gerald): 240p\n","Age of Wrath, The (Eraly, Abraham): 238p\n","Trial, The (Kafka, Frank): 198p\n","Statistical Decision Theory' (Pratt, John): 236p\n","Data Mining Handbook (Nisbet, Robert): 242p\n","New Machiavelli, The (Wells, H. G.): 180p\n","Physics & Philosophy (Heisenberg, Werner): 197p\n","Making Software (Oram, Andy): 232p\n","Analysis, Vol I (Tao, Terence): 248p\n","Machine Learning for Hackers (Conway, Drew): 233p\n","Signal and the Noise, The (Silver, Nate): 233p\n","Python for Data Analysis (McKinney, Wes): 233p\n","Introduction to Algorithms (Cormen, Thomas): 234p\n","Beautiful and the Damned, The (Deb, Siddhartha): 198p\n","Outsider, The (Camus, Albert): 198p\n","Complete Sherlock Holmes, The - Vol I (Doyle, Arthur Conan): 176p\n","Complete Sherlock Holmes, The - Vol II (Doyle, Arthur Conan): 176p\n","Wealth of Nations, The (Smith, Adam): 175p\n","Pillars of the Earth, The (Follett, Ken): 176p\n","Mein Kampf (Hitler, Adolf): 212p\n","Tao of Physics, The (Capra, Fritjof): 179p\n","Surely You're Joking Mr Feynman (Feynman, Richard): 198p\n","Farewell to Arms, A (Hemingway, Ernest): 179p\n","Veteran, The (Forsyth, Frederick): 177p\n","False Impressions (Archer, Jeffery): 177p\n","Last Lecture, The (Pausch, Randy): 197p\n","Return of the Primitive (Rand, Ayn): 202p\n","Jurassic Park (Crichton, Michael): 174p\n","Russian Journal, A (Steinbeck, John): 196p\n","Tales of Mystery and Imagination (Poe, Edgar Allen): 172p\n","Freakonomics (Dubner, Stephen): 197p\n","Hidden Connections, The (Capra, Fritjof): 197p\n","Story of Philosophy, The (Durant, Will): 170p\n","Asami Asami (Deshpande, P L): 205p\n","Journal of a Novel (Steinbeck, John): 196p\n","Once There Was a War (Steinbeck, John): 196p\n","Moon is Down, The (Steinbeck, John): 196p\n","Brethren, The (Grisham, John): 174p\n","In a Free State (Naipaul, V. S.): 196p\n","Catch 22 (Heller, Joseph): 178p\n","Complete Mastermind, The (BBC): 178p\n","Dylan on Dylan (Dylan, Bob): 197p\n","Soft Computing & Intelligent Systems (Gupta, Madan): 242p\n","Textbook of Economic Theory (Stonier, Alfred): 242p\n","Econometric Analysis (Greene, W. H.): 242p\n","Learning OpenCV (Bradsky, Gary): 232p\n","Data Structures Using C & C++ (Tanenbaum, Andrew): 235p\n","Computer Vision, A Modern Approach (Forsyth, David): 255p\n","Principles of Communication Systems (Taub, Schilling): 240p\n","Let Us C (Kanetkar, Yashwant): 213p\n","Amulet of Samarkand, The (Stroud, Jonathan): 179p\n","Crime and Punishment (Dostoevsky, Fyodor): 180p\n","Angels & Demons (Brown, Dan): 178p\n","Argumentative Indian, The (Sen, Amartya): 209p\n","Sea of Poppies (Ghosh, Amitav): 197p\n","Idea of Justice, The (Sen, Amartya): 212p\n","Raisin in the Sun, A (Hansberry, Lorraine): 175p\n","All the President's Men (Woodward, Bob): 177p\n","Prisoner of Birth, A (Archer, Jeffery): 176p\n","Scoop! (Nayar, Kuldip): 216p\n","Ahe Manohar Tari (Deshpande, Sunita): 213p\n","Last Mughal, The (Dalrymple, William): 199p\n","Social Choice & Welfare, Vol 39 No. 1 (Various): 235p\n","Radiowaril Bhashane & Shrutika (Deshpande, P L): 213p\n","Gun Gayin Awadi (Deshpande, P L): 212p\n","Aghal Paghal (Deshpande, P L): 212p\n","Maqta-e-Ghalib (Garg, Sanjay): 221p\n","Beyond Degrees (): 222p\n","Manasa (Kale, V P): 213p\n","India from Midnight to Milennium (Tharoor, Shashi): 198p\n","World's Greatest Trials, The (): 210p\n","Great Indian Novel, The (Tharoor, Shashi): 198p\n","O Jerusalem! (Lapierre, Dominique): 217p\n","City of Joy, The (Lapierre, Dominique): 177p\n","Freedom at Midnight (Lapierre, Dominique): 167p\n","Winter of Our Discontent, The (Steinbeck, John): 196p\n","On Education (Russell, Bertrand): 203p\n","Free Will (Harris, Sam): 203p\n","Bookless in Baghdad (Tharoor, Shashi): 206p\n","Case of the Lame Canary, The (Gardner, Earle Stanley): 179p\n","Theory of Everything, The (Hawking, Stephen): 217p\n","New Markets & Other Essays (Drucker, Peter): 176p\n","Electric Universe (Bodanis, David): 201p\n","Hunchback of Notre Dame, The (Hugo, Victor): 175p\n","Burning Bright (Steinbeck, John): 175p\n","Age of Discontuinity, The (Drucker, Peter): 178p\n","Doctor in the Nude (Gordon, Richard): 179p\n","Down and Out in Paris & London (Orwell, George): 179p\n","Identity & Violence (Sen, Amartya): 219p\n","Beyond the Three Seas (Dalrymple, William): 197p\n","World's Greatest Short Stories, The (): 217p\n","Talking Straight (Iacoca, Lee): 175p\n","Maugham's Collected Short Stories, Vol 3 (Maugham, William S): 171p\n","Phantom of Manhattan, The (Forsyth, Frederick): 180p\n","Ashenden of The British Agent (Maugham, William S): 160p\n","Zen & The Art of Motorcycle Maintenance (Pirsig, Robert): 172p\n","Great War for Civilization, The (Fisk, Robert): 197p\n","We the Living (Rand, Ayn): 178p\n","Artist and the Mathematician, The (Aczel, Amir): 186p\n","History of Western Philosophy (Russell, Bertrand): 213p\n","Selected Short Stories (): 215p\n","Rationality & Freedom (Sen, Amartya): 213p\n","Clash of Civilizations and Remaking of the World Order (Huntington, Samuel): 228p\n","Uncommon Wisdom (Capra, Fritjof): 197p\n","One (Bach, Richard): 172p\n","Karl Marx Biography (): 162p\n","To Sir With Love (Braithwaite): 197p\n","Half A Life (Naipaul, V S): 196p\n","Discovery of India, The (Nehru, Jawaharlal): 230p\n","Apulki (Deshpande, P L): 211p\n","Unpopular Essays (Russell, Bertrand): 198p\n","Deceiver, The (Forsyth, Frederick): 178p\n","Veil: Secret Wars of the CIA (Woodward, Bob): 171p\n","Char Shabda (Deshpande, P L): 214p\n","Rosy is My Relative (Durrell, Gerald): 176p\n","Moon and Sixpence, The (Maugham, William S): 180p\n","Political Philosophers (): 162p\n","Short History of the World, A (Wells, H G): 197p\n","Trembling of a Leaf, The (Maugham, William S): 205p\n","Doctor on the Brain (Gordon, Richard): 204p\n","Simpsons & Their Mathematical Secrets (Singh, Simon): 233p\n","Pattern Classification (Duda, Hart): 241p\n","From Beirut to Jerusalem (Friedman, Thomas): 202p\n","Code Book, The (Singh, Simon): 197p\n","Age of the Warrior, The (Fisk, Robert): 197p\n","Final Crisis (): 257p\n","Killing Joke, The (): 283p\n","Flashpoint (): 265p\n","Batman Earth One (): 265p\n","Crisis on Infinite Earths (): 258p\n","Numbers Behind Numb3rs, The (Devlin, Keith): 202p\n","Superman Earth One - 1 (): 259p\n","Superman Earth One - 2 (): 258p\n","Justice League: Throne of Atlantis (): 258p\n","Justice League: The Villain's Journey (): 258p\n","Death of Superman, The (): 258p\n","History of the DC Universe (): 258p\n","Batman: The Long Halloween (): 258p\n","Life in Letters, A (Steinbeck, John): 196p\n","Information, The (Gleick, James): 233p\n","Journal of Economics, vol 106 No 3 (): 235p\n","Elements of Information Theory (Thomas, Joy): 229p\n","Power Electronics - Rashid (Rashid, Muhammad): 235p\n","Power Electronics - Mohan (Mohan, Ned): 237p\n","Neural Networks (Haykin, Simon): 240p\n","Grapes of Wrath, The (Steinbeck, John): 196p\n","Vyakti ani Valli (Deshpande, P L): 211p\n","Statistical Learning Theory (Vapnik, Vladimir): 228p\n","Empire of the Mughal - The Tainted Throne (Rutherford, Alex): 180p\n","Empire of the Mughal - Brothers at War (Rutherford, Alex): 180p\n","Empire of the Mughal - Ruler of the World (Rutherford, Alex): 180p\n","Empire of the Mughal - The Serpent's Tooth (Rutherford, Alex): 180p\n","Empire of the Mughal - Raiders from the North (Rutherford, Alex): 180p\n","Mossad (Baz-Zohar, Michael): 236p\n","Jim Corbett Omnibus (Corbett, Jim): 223p\n","20000 Leagues Under the Sea (Verne, Jules): 190p\n","Batatyachi Chal (Deshpande P L): 200p\n","Hafasavnuk (Deshpande P L): 211p\n","Urlasurla (Deshpande P L): 211p\n","Pointers in C (Kanetkar, Yashwant): 213p\n","Cathedral and the Bazaar, The (Raymond, Eric): 217p\n","Design with OpAmps (Franco, Sergio): 240p\n","Think Complexity (Downey, Allen): 230p\n","Devil's Advocate, The (West, Morris): 178p\n","Ayn Rand Answers (Rand, Ayn): 203p\n","Philosophy: Who Needs It (Rand, Ayn): 171p\n","World's Great Thinkers, The (): 189p\n","Data Analysis with Open Source Tools (Janert, Phillip): 230p\n","Broca's Brain (Sagan, Carl): 174p\n","Men of Mathematics (Bell, E T): 217p\n","Oxford book of Modern Science Writing (Dawkins, Richard): 240p\n","Justice, Judiciary and Democracy (Ranjan, Sudhanshu): 224p\n","Arthashastra, The (Kautiyla): 214p\n","We the People (Palkhivala): 216p\n","We the Nation (Palkhivala): 216p\n","Courtroom Genius, The (Sorabjee): 217p\n","Dongri to Dubai (Zaidi, Hussain): 216p\n","History of England, Foundation (Ackroyd, Peter): 197p\n","City of Djinns (Dalrymple, William): 198p\n","India's Legal System (Nariman): 177p\n","More Tears to Cry (Sassoon, Jean): 235p\n","Ropemaker, The (Dickinson, Peter): 196p\n","Angels & Demons (Brown, Dan): 170p\n","Judge, The (): 170p\n","Attorney, The (): 170p\n","Prince, The (Machiavelli): 173p\n","Eyeless in Gaza (Huxley, Aldous): 180p\n","Tales of Beedle the Bard (Rowling, J K): 184p\n","Girl with the Dragon Tattoo (Larsson, Steig): 179p\n","Girl who kicked the Hornet's Nest (Larsson, Steig): 179p\n","Girl who played with Fire (Larsson, Steig): 179p\n","Batman Handbook (): 270p\n","Murphy's Law (): 178p\n","Structure and Randomness (Tao, Terence): 252p\n","Image Processing with MATLAB (Eddins, Steve): 241p\n","Animal Farm (Orwell, George): 180p\n","Idiot, The (Dostoevsky, Fyodor): 197p\n","Christmas Carol, A (Dickens, Charles): 196p\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"6f3F68YG7QdO"},"source":["## CSV 데이터 변환하기\n","CSV 데이터의 각 열은 고유한 의미를 갖습니다. 책 데이터를 CSV 형식으로 저장한다면 각 열은 제목, 작가, 페이지 수 등의 의미를 갖게 됩니다.\n","\n","이 성질을 이용하면 CSV 데이터를 JSON으로 변환할 수 있습니다. 이 실습에서는 책 데이터를 담은 CSV 파일을 동일한 의미를 가진 JSON 형식으로 변환해 봅니다."]},{"cell_type":"code","metadata":{"id":"F47SQvuP8Dbp","executionInfo":{"status":"ok","timestamp":1604068616977,"user_tz":-540,"elapsed":1161,"user":{"displayName":"Ji-hoon Jung","photoUrl":"","userId":"03169308685755834042"}}},"source":["# elice-utils\n","# maintainer: Suin Kim (suin@elicer.com) and Jungkook Park (jk@elicer.com)\n","\n","import base64\n","import mimetypes\n","import os\n","import urllib.parse\n","import urllib.request\n","\n","\n","class EliceUtils(object):\n","\n","    def __init__(self):\n","        self._execution_token = os.getenv('EXECUTION_TOKEN')\n","        self._executor_ip = os.getenv('EXECUTOR_IP')\n","        self._executor_com_port = os.getenv('EXECUTOR_COM_PORT')\n","        self._otp_key = None\n","\n","        self._local_mode = False\n","\n","        if not all((self._execution_token, self._executor_ip, self._executor_com_port)):\n","            self._local_mode = True\n","\n","            print('=== NON-ELICE ENVIRONMENT ===')\n","            print('Warning: This script is running on the non-elice environment. '\n","                  'All outputs will be redirected to standard output.')\n","            print('=============================')\n","\n","    def _send(self, url, data):\n","        if self._local_mode:\n","            msg_type = data['type']\n","            msg_data = data['data']\n","\n","            if msg_type in ['grader', 'score']:\n","                print('[%s] %s' % (msg_type, msg_data), end='')\n","            else:\n","                print('[%s]' % msg_type, end='')\n","\n","            return\n","\n","        data_encoded = urllib.parse.urlencode(data)\n","        q = urllib.request.Request(url,\n","                                   data=data_encoded.encode('utf-8'))\n","\n","        try:\n","            urllib.request.urlopen(q)\n","        except Exception:\n","            raise Exception('Failed to send message to elice.')\n","\n","    def _handle_image(self, filepath):\n","        mtype, _ = mimetypes.guess_type(filepath)\n","\n","        if mtype is None or not mtype.startswith('image/'):\n","            raise ValueError('Invalid image filepath.')\n","\n","        with open(filepath, 'rb') as f:\n","            data = 'data:%s;base64,%s' % (\n","                mtype,\n","                base64.b64encode(f.read()).decode('utf-8')\n","            )\n","\n","        return data\n","\n","    def _handle_file(self, filepath):\n","        mtype, _ = mimetypes.guess_type(filepath)\n","\n","        with open(filepath, 'rb') as f:\n","            data = '%s;data:%s;base64,%s' % (\n","                os.path.basename(filepath),\n","                mtype or 'application/octet-stream',\n","                base64.b64encode(f.read()).decode('utf-8')\n","            )\n","\n","        return data\n","\n","    def send(self, msg_type, msg_data):\n","        self._send(\n","            'http://%s:%s/comm/send/%s' % (self._executor_ip,\n","                                           self._executor_com_port,\n","                                           self._execution_token),\n","            {'type': msg_type, 'data': msg_data}\n","        )\n","\n","    def send_image(self, filepath):\n","        self.send('image', self._handle_image(filepath))\n","\n","    def send_file(self, filepath):\n","        self.send('file', self._handle_file(filepath))\n","\n","    def secure_init(self):\n","        if self._local_mode:\n","            return\n","\n","        try:\n","            r = urllib.request.urlopen(\n","                'http://%s:%s/comm/secure/init/%s' % (self._executor_ip,\n","                                                      self._executor_com_port,\n","                                                      self._execution_token)\n","            )\n","        except Exception:\n","            raise Exception('Failed to initialize elice util secure channel.')\n","\n","        self._otp_key = r.read().decode('utf-8')\n","\n","    def secure_send(self, msg_type, msg_data):\n","        self._send(\n","            'http://%s:%s/comm/secure/send/%s/%s' % (self._executor_ip,\n","                                                     self._executor_com_port,\n","                                                     self._execution_token,\n","                                                     self._otp_key),\n","            {'type': msg_type, 'data': msg_data}\n","        )\n","\n","    def secure_send_image(self, filepath):\n","        self.secure_send('image', self._handle_image(filepath))\n","\n","    def secure_send_file(self, filepath):\n","        self.secure_send('file', self._handle_file(filepath))\n","\n","    def secure_send_grader(self, msg):\n","        self.secure_send('grader', msg)\n","\n","    def secure_send_score(self, score):\n","        self.secure_send('score', score)\n"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"_VtuCeT87SsI","executionInfo":{"status":"ok","timestamp":1604068620594,"user_tz":-540,"elapsed":1207,"user":{"displayName":"Ji-hoon Jung","photoUrl":"","userId":"03169308685755834042"}},"outputId":"70c396d1-b504-48a7-a97c-8175600f1c18","colab":{"base_uri":"https://localhost:8080/"}},"source":["# CSV, JSON 모듈을 임포트합니다.\n","import csv\n","import json\n","# from elice_utils import EliceUtils\n","\n","elice_utils = EliceUtils()\n","\n","def books_to_json(src_file, dst_file):\n","    # 아래 함수를 완성하세요.\n","    books = []\n","    with open(src_file) as src:\n","        reader = csv.reader(src, delimiter=\",\")\n","        \n","        # 각 줄 별로 대응되는 book 딕셔너리를 만듭니다.\n","        for row in reader:\n","            # 책 정보를 저장하는 딕셔너리를 생성합니다.\n","            book = {\n","                'title': row[0], \n","                'author': row[1], \n","                'genre': row[2], \n","                'pages': int(row[3]), \n","                'publisher': row[4]\n","\n","            }\n","            books.append(book)\n","    \n","    with open(dst_file, 'w') as dst:\n","        # JSON 형식으로 dst_file에 저장합니다.\n","        json_string = json.dumps(books)\n","        dst.write(json_string)\n","\n","\n","# 아래 주석을 해제하고 결과를 확인해보세요.  \n","src_file = 'data/books.csv'\n","dst_file = 'data/books.json'\n","books_to_json(src_file, dst_file)\n","elice_utils.send_file(dst_file)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["=== NON-ELICE ENVIRONMENT ===\n","Warning: This script is running on the non-elice environment. All outputs will be redirected to standard output.\n","=============================\n","[file]"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Tsy3Q4ap8UiB"},"source":["## 한 줄 함수 작성하기\n","lambda는 def와 비슷하게 함수를 생성하는 연산입니다. 단, 함수가 이름을 갖지 않고, 특정 범위에서만 적용되기 때문에 한 번만 사용되거나 아주 간단한 함수를 선언할 때 사용됩니다. 그 외의 경우 def를 이용합니다.\n","\n","아래 코드는 동일한 기능을 갖고 있습니다.\n","\n","```python\n","def addition(x, y):\n","        return x + y\n","\n","addition(10, 20)\n","```\n","```python\n","(lambda x, y: x + y)(10, 20)\n","```"]},{"cell_type":"code","metadata":{"id":"uWNKYFsf8gv-","executionInfo":{"status":"ok","timestamp":1604069039311,"user_tz":-540,"elapsed":1170,"user":{"displayName":"Ji-hoon Jung","photoUrl":"","userId":"03169308685755834042"}},"outputId":"1d35d02b-3ffd-432d-ee14-f164fcc3e1f5","colab":{"base_uri":"https://localhost:8080/"}},"source":["'''\n","num을 제곱한 값을 리턴합니다.\n","'''\n","def _square(num):\n","    return num * num\n","\n","# _square()와 동일한 기능을 하는 lambda 함수 square를 만들어 보세요.\n","square = lambda num: num * num\n","\n","'''\n","string이 빈 문자열일 경우 빈 문자열을, 아니면 첫 번째 글자를 리턴합니다.\n","'''\n","def _first_letter(string):\n","    return string[0] if string else ''\n","\n","# If condition: \n","#   return \"a\"\n","# else: \n","#   anser = \"b\"\n","# answer = \"a\" if condition else \"b\"\n","\n","first_letter = lambda string: string[0] if string else ''\n","\n","\n","# assert를 이용하여 두 함수의 기능이 동일한 지 테스트합니다. 아래 주석을 해제하고 결과 값을 확인해보세요.\n","testcases1 = [3, 10, 7, 1, -5]\n","for num in testcases1:\n","     assert(_square(num) == square(num))\n","\n","testcases2 = ['', 'hello', 'elice', 'abracadabra', '  abcd  ']\n","for string in testcases2:\n","     assert(_first_letter(string) == first_letter(string))\n","\n","# # 위의 assert 테스트를 모두 통과해야만 아래의 print문이 실행됩니다.\n","print(\"성공했습니다!\")\n"],"execution_count":11,"outputs":[{"output_type":"stream","text":["성공했습니다!\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ZCFeLxEe923S"},"source":["## 함수를 리턴하는 함수\n","파이썬의 함수는 함수를 리턴값으로 가질 수 있습니다. 지금까지는 정수, 문자열과 같은 변수만을 리턴했지만, 종종 함수를 리턴값으로 갖는 경우도 있습니다.\n","\n","itemgetter() 함수가 대표적인 예입니다. itemgetter의 리턴값은 데이터의 모음을 받아 n번째 원소를 리턴하는 함수입니다.\n","\n","```python\n","from operator import itemgetter\n","get_zeroth = itemgetter(0)\n","numbers = [1, 2, 3]\n","print(get_zeroth(numbers))\n","1\n","```\n","함수 내부에서 함수를 리턴하는 방법은, lambda를 사용할 수도 있고, 다음과 같이 함수 내에서 def를 또 사용할 수도 있습니다.\n","\n","```python\n","def adder(n):\n","    def helper(x):\n","        return x + n\n","    return helper\n","\n","add_three = adder(3)\n","print(add_three(6)) # 9\n","```"]},{"cell_type":"code","metadata":{"id":"cV8JRdjq-FpZ","executionInfo":{"status":"ok","timestamp":1604069473605,"user_tz":-540,"elapsed":1546,"user":{"displayName":"Ji-hoon Jung","photoUrl":"","userId":"03169308685755834042"}},"outputId":"503e34bd-671a-4903-f749-04163975d7ca","colab":{"base_uri":"https://localhost:8080/"}},"source":["'''\n","주어진 값이 정수가 아니거나 최솟값 minimum보다 작으면 False를 리턴하는 함수를 리턴합니다.\n","\n","'''\n","def min_validator(minimum):\n","    def helper(n):\n","        # n의 타입이 정수가 아니면 False를 리턴합니다.\n","        if type(n) is not int:\n","            return False\n","        \n","        # 아래 함수를 완성하세요.\n","        return minimum <= n\n","\n","    return helper\n","'''    \n","주어진 값이 정수가 아니거나 최댓값 maximum보다 크면 False를 리턴하는 함수를 리턴합니다.\n","'''\n","def max_validator(maximum):\n","    def helper(n):\n","        # n의 타입이 정수가 아니면 False를 리턴합니다.\n","        if type(n) is not int:\n","          return False\n","        \n","        # 아래 함수를 완성하세요.\n","        return maximum >= n\n","    return helper\n","\n","\n","def validate(n, validators):\n","    # validator 중 하나라도 통과하지 못하면 False를 리턴합니다.\n","    for validator in validators:\n","        if not validator(n):\n","            return False\n","    \n","    return True\n","\n","\n","# 작성한 함수를 테스트합니다. # 아래 주석을 해제하고 결과 값을 확인해보세요.\n","# # 나이 데이터를 검증하는 validator를 선언합니다. \n","age_validators = [min_validator(0), max_validator(120)]\n","ages = [9, -3, 7, 33, 18, 1999, 287, 0, 13]\n","\n","# # 주어진 나이 데이터들에 대한 검증 결과를 출력합니다.\n","print(\"검증 결과\")\n","for age in ages:\n","     result = \"유효함\" if validate(age, age_validators) else \"유효하지 않음\"\n","     print(\"{}세 : {}\".format(age, result))\n"],"execution_count":12,"outputs":[{"output_type":"stream","text":["검증 결과\n","9세 : 유효함\n","-3세 : 유효하지 않음\n","7세 : 유효함\n","33세 : 유효함\n","18세 : 유효함\n","1999세 : 유효하지 않음\n","287세 : 유효하지 않음\n","0세 : 유효함\n","13세 : 유효함\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"kMg4IfaT_oKU"},"source":["## 리스트에 함수 적용하기\n","map()은 데이터 구조의 각 원소들에 동일한 함수를 적용하여 새로운 데이터를 만드는 파이썬의 기본 함수입니다. data라는 리스트가 주어졌을 때, 아래의 두 코드는 유사한 연산을 합니다.\n","\n","```python\n","[func(x) for x in data]\n","map(func, data)\n","```"]},{"cell_type":"code","metadata":{"id":"xNiI49Hx_uig","executionInfo":{"status":"ok","timestamp":1604069748423,"user_tz":-540,"elapsed":1434,"user":{"displayName":"Ji-hoon Jung","photoUrl":"","userId":"03169308685755834042"}},"outputId":"267c42c5-d36b-479e-e1a5-d46a3ac1e792","colab":{"base_uri":"https://localhost:8080/"}},"source":["# CSV 모듈을 임포트합니다.\n","import csv\n","\n","def get_titles(books_csv):\n","    with open(books_csv) as books:\n","        reader = csv.reader(books, delimiter=',')\n","        # 함수를 완성하세요.\n","        get_title = lambda row: row[0]\n","        titles = map(get_title, reader)\n","        # titles = []\n","        # for row in reader:\n","        #   titles.append(get_title(row))\n","\n","        return list(titles)\n","\n","\n","# 작성한 코드를 테스트합니다. 주석을 해제하고 실행하세요.\n","books = 'data/books.csv'\n","titles = get_titles(books)\n","for title in titles:\n","      print(title)"],"execution_count":14,"outputs":[{"output_type":"stream","text":["Fundamentals of Wavelets\n","Data Smart\n","God Created the Integers\n","Superfreakonomics\n","Orientalism\n","Nature of Statistical Learning Theory, The\n","Integration of the Indian States\n","Drunkard's Walk, The\n","Image Processing & Mathematical Morphology\n","How to Think Like Sherlock Holmes\n","Data Scientists at Work\n","Slaughterhouse Five\n","Birth of a Theorem\n","Structure & Interpretation of Computer Programs\n","Age of Wrath, The\n","Trial, The\n","Statistical Decision Theory'\n","Data Mining Handbook\n","New Machiavelli, The\n","Physics & Philosophy\n","Making Software\n","Analysis, Vol I\n","Machine Learning for Hackers\n","Signal and the Noise, The\n","Python for Data Analysis\n","Introduction to Algorithms\n","Beautiful and the Damned, The\n","Outsider, The\n","Complete Sherlock Holmes, The - Vol I\n","Complete Sherlock Holmes, The - Vol II\n","Wealth of Nations, The\n","Pillars of the Earth, The\n","Mein Kampf\n","Tao of Physics, The\n","Surely You're Joking Mr Feynman\n","Farewell to Arms, A\n","Veteran, The\n","False Impressions\n","Last Lecture, The\n","Return of the Primitive\n","Jurassic Park\n","Russian Journal, A\n","Tales of Mystery and Imagination\n","Freakonomics\n","Hidden Connections, The\n","Story of Philosophy, The\n","Asami Asami\n","Journal of a Novel\n","Once There Was a War\n","Moon is Down, The\n","Brethren, The\n","In a Free State\n","Catch 22\n","Complete Mastermind, The\n","Dylan on Dylan\n","Soft Computing & Intelligent Systems\n","Textbook of Economic Theory\n","Econometric Analysis\n","Learning OpenCV\n","Data Structures Using C & C++\n","Computer Vision, A Modern Approach\n","Principles of Communication Systems\n","Let Us C\n","Amulet of Samarkand, The\n","Crime and Punishment\n","Angels & Demons\n","Argumentative Indian, The\n","Sea of Poppies\n","Idea of Justice, The\n","Raisin in the Sun, A\n","All the President's Men\n","Prisoner of Birth, A\n","Scoop!\n","Ahe Manohar Tari\n","Last Mughal, The\n","Social Choice & Welfare, Vol 39 No. 1\n","Radiowaril Bhashane & Shrutika\n","Gun Gayin Awadi\n","Aghal Paghal\n","Maqta-e-Ghalib\n","Beyond Degrees\n","Manasa\n","India from Midnight to Milennium\n","World's Greatest Trials, The\n","Great Indian Novel, The\n","O Jerusalem!\n","City of Joy, The\n","Freedom at Midnight\n","Winter of Our Discontent, The\n","On Education\n","Free Will\n","Bookless in Baghdad\n","Case of the Lame Canary, The\n","Theory of Everything, The\n","New Markets & Other Essays\n","Electric Universe\n","Hunchback of Notre Dame, The\n","Burning Bright\n","Age of Discontuinity, The\n","Doctor in the Nude\n","Down and Out in Paris & London\n","Identity & Violence\n","Beyond the Three Seas\n","World's Greatest Short Stories, The\n","Talking Straight\n","Maugham's Collected Short Stories, Vol 3\n","Phantom of Manhattan, The\n","Ashenden of The British Agent\n","Zen & The Art of Motorcycle Maintenance\n","Great War for Civilization, The\n","We the Living\n","Artist and the Mathematician, The\n","History of Western Philosophy\n","Selected Short Stories\n","Rationality & Freedom\n","Clash of Civilizations and Remaking of the World Order\n","Uncommon Wisdom\n","One\n","Karl Marx Biography\n","To Sir With Love\n","Half A Life\n","Discovery of India, The\n","Apulki\n","Unpopular Essays\n","Deceiver, The\n","Veil: Secret Wars of the CIA\n","Char Shabda\n","Rosy is My Relative\n","Moon and Sixpence, The\n","Political Philosophers\n","Short History of the World, A\n","Trembling of a Leaf, The\n","Doctor on the Brain\n","Simpsons & Their Mathematical Secrets\n","Pattern Classification\n","From Beirut to Jerusalem\n","Code Book, The\n","Age of the Warrior, The\n","Final Crisis\n","Killing Joke, The\n","Flashpoint\n","Batman Earth One\n","Crisis on Infinite Earths\n","Numbers Behind Numb3rs, The\n","Superman Earth One - 1\n","Superman Earth One - 2\n","Justice League: Throne of Atlantis\n","Justice League: The Villain's Journey\n","Death of Superman, The\n","History of the DC Universe\n","Batman: The Long Halloween\n","Life in Letters, A\n","Information, The\n","Journal of Economics, vol 106 No 3\n","Elements of Information Theory\n","Power Electronics - Rashid\n","Power Electronics - Mohan\n","Neural Networks\n","Grapes of Wrath, The\n","Vyakti ani Valli\n","Statistical Learning Theory\n","Empire of the Mughal - The Tainted Throne\n","Empire of the Mughal - Brothers at War\n","Empire of the Mughal - Ruler of the World\n","Empire of the Mughal - The Serpent's Tooth\n","Empire of the Mughal - Raiders from the North\n","Mossad\n","Jim Corbett Omnibus\n","20000 Leagues Under the Sea\n","Batatyachi Chal\n","Hafasavnuk\n","Urlasurla\n","Pointers in C\n","Cathedral and the Bazaar, The\n","Design with OpAmps\n","Think Complexity\n","Devil's Advocate, The\n","Ayn Rand Answers\n","Philosophy: Who Needs It\n","World's Great Thinkers, The\n","Data Analysis with Open Source Tools\n","Broca's Brain\n","Men of Mathematics\n","Oxford book of Modern Science Writing\n","Justice, Judiciary and Democracy\n","Arthashastra, The\n","We the People\n","We the Nation\n","Courtroom Genius, The\n","Dongri to Dubai\n","History of England, Foundation\n","City of Djinns\n","India's Legal System\n","More Tears to Cry\n","Ropemaker, The\n","Angels & Demons\n","Judge, The\n","Attorney, The\n","Prince, The\n","Eyeless in Gaza\n","Tales of Beedle the Bard\n","Girl with the Dragon Tattoo\n","Girl who kicked the Hornet's Nest\n","Girl who played with Fire\n","Batman Handbook\n","Murphy's Law\n","Structure and Randomness\n","Image Processing with MATLAB\n","Animal Farm\n","Idiot, The\n","Christmas Carol, A\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"iqmRhNERAoEq"},"source":["## 리스트에 함수 적용하기\n","filter()는 주어진 데이터 구조에서 특정 조건을 만족하는 원소만 골라 내는 파이썬의 기본 함수입니다. data라는 리스트가 주어졌을 때, 아래의 두 코드는 유사한 연산을 합니다.\n","\n","```python\n","[x for x in data if func(x)]\n","filter(func, data)\n","```"]},{"cell_type":"code","metadata":{"id":"E3T-gWBTApAj","executionInfo":{"status":"ok","timestamp":1604069888241,"user_tz":-540,"elapsed":1458,"user":{"displayName":"Ji-hoon Jung","photoUrl":"","userId":"03169308685755834042"}},"outputId":"661a1031-8f22-4008-e6dd-ca8bb6751559","colab":{"base_uri":"https://localhost:8080/"}},"source":["# CSV 모듈을 임포트합니다.\n","import csv\n","\n","def get_titles_of_long_books(books_csv):\n","    with open(books_csv) as books:\n","        reader = csv.reader(books, delimiter=',')\n","        # 함수를 완성하세요.\n","        is_long = lambda row: int(row[3]) > 250\n","        get_title = lambda row: row[0]\n","        \n","        long_books = filter(is_long, reader)\n","        long_book_titles = map(get_title, long_books)\n","        \n","        return list(long_book_titles)\n","\n","\n","# 작성한 함수를 테스트합니다. 주석을 해제하고 실행하세요.\n","books  = 'data/books.csv'\n","titles = get_titles_of_long_books(books)\n","for title in titles:\n","     print(title)\n"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Computer Vision, A Modern Approach\n","Final Crisis\n","Killing Joke, The\n","Flashpoint\n","Batman Earth One\n","Crisis on Infinite Earths\n","Superman Earth One - 1\n","Superman Earth One - 2\n","Justice League: Throne of Atlantis\n","Justice League: The Villain's Journey\n","Death of Superman, The\n","History of the DC Universe\n","Batman: The Long Halloween\n","Batman Handbook\n","Structure and Randomness\n"],"name":"stdout"}]}]}